<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flex 布局语法</title>
      <link href="posts/d4aa8785584a/"/>
      <url>posts/d4aa8785584a/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><blockquote><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p></blockquote><p>要为元素指定为弹性布局，只需添加<code>display: flex</code>属性，添加弹性布局的元素称为容器，它的所有子元素自动按照弹性布局排列。</p><p>容器有以下属性，用以规定它的子元素排列、对齐规则：</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><p>另外，作为容器的子元素，称为“flex项目”，它们也有自己的属性，用来决定自身的排列、对齐规则：</p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>align-self</li></ul><p>了解到这些属性，接下来再详细了解这些属性以及它们对应的各种属性值用来作何作用</p><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>该属性有四个值，规定子元素的排列方向：</p><ul><li>row(默认) ： 规定元素从左至右排列</li><li>row-reverse： 规定元素从右至左排列</li><li>column：规定元素从上至下排列</li><li>column-reverse：规定元素由下至上进行排列</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/direction-values.png" alt="direction的四种值"></p><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>该属性有三个值，规定子元素的换行规则：</p><ul><li>nowrap（默认）：元素始终在一行排列，不进行换行</li><li>wrap：元素超出后换行，超出元素在第一行下面</li><li>wrap-reverse：元素超出后换行，超出元素在第一行上面</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/flex-wrap-values.png" alt="flex-wrap的三种值"></p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>该属性通过<code>flex-direction</code>和<code>flex-wrap</code>属性简写而来：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>该属性定义容器字元素基于<code>flex-direction</code>排列方向的水平对齐方式，它可能有六个值：</p><ul><li>flex-start（默认）：从排列方向的起始位置对齐</li><li>flex-end：从排列反向的末尾对齐</li><li>center：基于排列方向上水平居中</li><li>space-between：所有元素基于容器宽度两端对齐</li><li>space-around：均匀地分布在行中，两端各有一半大小的空间</li><li>space-evenly：所有子元素均匀的分散在容器中</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/justify-content-values.png" alt="justify-content的六种值"></p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>该属性定义容器基于<code>flex-direction</code>排列方向的垂直对齐方式，它可能有五个值：</p><ul><li><p>stretch（默认）：如果子元素未设置高度和<code>auto</code>，将沾满整个容器的宽度</p></li><li><p>flex-start：从排列方向的起始位置对齐</p></li><li><p>flex-end：从排列反向的末尾对齐</p></li><li><p>center：基于排列方向上水平居中</p></li><li><p>baseline： 基于所有子元素义一行文字的基线对齐</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/align-item-values.png" alt="align-items的五个属性值"></p><p>结构如下：</p><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>概述新定义了多个排列方向的对齐方式，它可能有六个值：</p><ul><li><p>stretch（默认）：如果子元素未设置高度和<code>auto</code>，将沾满整个容器的宽度</p></li><li><p>flex-start：从排列方向的起点对齐</p></li><li><p>flex-end：从排列方向的终点对齐</p></li><li><p>center：基于排列方向中点对齐</p></li><li><p>space-between：基于排列方向两端对齐</p></li><li><p>space-around：均匀地分布在行中，两端各有一半大小的空间</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/align-content-values.png" alt="align-content的六个值"></p><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><blockquote><p>定义项目自身的排列顺序，数值越小，排列越靠前，默认为0</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/order-values.png" alt="order"></p><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/order-code.png"></p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>该属性定义项目自身方法比例，默认<code>0</code>，不会放大</p><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/flex-grow.png"></p><p>如果各个项目的<code>flex-grow</code>属性值相等，则他们会等会剩余空间；值不相等，则他们会按照数字的倍数进行等分，即值为2分到的空间为1的2倍。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>该属性定义项目自身缩小比例，默认为1，如果空间不足，项目将会自动缩小</p><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/shrink.png" alt="flex-shrink"></p><p>如果定义所有项目不缩小，则他们会超出元素</p><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/shrink-all.png"></p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>通过定义该属性，可以覆盖项目自身的宽度，默认值为<code>auto</code>，即项目自身的大小</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>该属性是作为以上三种属性<code>flex-grow</code>,<code>flex-shrink</code>,<code>flex-basis</code>的简写方式，默认值为<code>0 1 auto</code>，它有两个简写值<code>auto</code>和<code>none</code>分别对应<code>1 1 auto</code>和<code>0 0 auto</code></p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>该属性定义项目自身与其他项目不一样的对齐方式，即覆盖<code>align-items</code>属性，定义自身的对齐方式，它与<code>align-items</code>具有相同的属性值，默认值为<code>auto</code>,即默认继承容器规定的对齐方式<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/align-self.png" alt="align-self"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>flex</code>布局发展到现在，已经成为前端主流布局首选方案，记录本文跟着代码再实现一遍，受益良多。</p><p>最后再补上一张浏览器的支持情况，基本已兼容现代各种主流浏览器</p><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/flex-layout/flex-support.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中常用的工具类函数封装</title>
      <link href="posts/f4bcf7d0342e/"/>
      <url>posts/f4bcf7d0342e/</url>
      
        <content type="html"><![CDATA[<h2 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中"></a>持续更新中</h2><p>本文主要整理一些工作中常用到的方法进行封装，以便日后使用</p><h2 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取查询字符串参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;search&#125;</span> </span>query string &#123;location.search&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: Object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getQueryString = <span class="function"><span class="params">search</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> urlArr = search.substring(<span class="number">1</span>).split(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; urlArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> arg = urlArr[i].split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        params[arg[<span class="number">0</span>]] = arg[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 递归深拷贝对象每一层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;obj&#125;</span> </span>原对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: Object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[i] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            newObj[i] = deepCopy(obj[i])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newObj[i] = obj[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并键值相同的对象"><a href="#合并键值相同的对象" class="headerlink" title="合并键值相同的对象"></a>合并键值相同的对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 合并键值相同的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;target&#125;</span> </span>需要处理的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;source&#125;</span> </span>传过来的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: Object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> = mergeObj = <span class="function">(<span class="params">target, source</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parmaKeys = <span class="built_in">Object</span>.keys(target)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parmaKeys.includes(key)) &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 生成随机字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;length&#125;</span> </span>字符串长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> randomString = <span class="function">(<span class="params">length = <span class="number">8</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> chars = <span class="string">&#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> maxPos = chars.length</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        str += chars.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxPos))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成随机色"><a href="#生成随机色" class="headerlink" title="生成随机色"></a>生成随机色</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 生成12进制随机色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getRandomColor = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rgb = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">let</span> color = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>).toString(<span class="number">16</span>)</span><br><span class="line">        color = color.length == <span class="number">1</span> ? <span class="string">&#x27;0&#x27;</span> + color : color</span><br><span class="line">        rgb.push(color)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + rgb.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;fn&#125;</span> </span>执行方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;wait&#125;</span> </span>延时</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, wait = <span class="number">50</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 节流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;fn&#125;</span> </span>执行方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;delay&#125;</span> </span>延迟</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;mustRunDelay&#125;</span> </span>必须执行时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay = <span class="number">100</span>, mustRunDelay = <span class="number">200</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> t_start</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>, args = <span class="built_in">arguments</span>, t_curr = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">if</span> (!t_start) &#123;</span><br><span class="line">            t_start = t_curr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t_curr - t_start &gt;= mustRunDelay) &#123;</span><br><span class="line">            fn.apply(context, args)</span><br><span class="line">            t_start = t_curr</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn.apply(context, args)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证组织机构代码"><a href="#验证组织机构代码" class="headerlink" title="验证组织机构代码"></a>验证组织机构代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>验证组织机构代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;code&#125;</span> </span>组织机构代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">Boolean</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> checkOrgCodeValid = <span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> values = code.split(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> ws = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/^([0-9A-Z])&#123;8&#125;$/</span></span><br><span class="line">    <span class="keyword">if</span> (!reg.test(values[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        sum += str.indexOf(values[<span class="number">0</span>].charAt(i)) * ws[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> C9 = <span class="number">11</span> - (sum % <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">let</span> YC9 = values[<span class="number">1</span>] + <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (C9 == <span class="number">11</span>) &#123;</span><br><span class="line">        C9 = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (C9 == <span class="number">10</span>) &#123;</span><br><span class="line">        C9 = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        C9 = C9 + <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> YC9 == C9</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证统一社会信用代码"><a href="#验证统一社会信用代码" class="headerlink" title="验证统一社会信用代码"></a>验证统一社会信用代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>验证统一社会信用代码合法性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;socialCode&#125;</span> </span>社会信用代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">Boolean</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isSocialCode = <span class="function"><span class="params">socialCode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/[0-9A-HJ-NPQRTUWXY]&#123;2&#125;\d&#123;6&#125;[0-9A-HJ-NPQRTUWXY]&#123;10&#125;/</span></span><br><span class="line">    <span class="keyword">return</span> reg.test(socialCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 时间格式化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;(Object|String|Number)&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">cFormat</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">String</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> parseTime = <span class="function">(<span class="params">time, cFormat</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> format = cFormat || <span class="string">&#x27;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> date</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        date = time</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">typeof</span> time === <span class="string">&#x27;string&#x27;</span>) &amp;&amp; (<span class="regexp">/^[0-9]+$/</span>.test(time))) &#123;</span><br><span class="line">            time = <span class="built_in">parseInt</span>(time)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">typeof</span> time === <span class="string">&#x27;number&#x27;</span>) &amp;&amp; (time.toString().length === <span class="number">10</span>)) &#123;</span><br><span class="line">            time = time * <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> formatObj = &#123;</span><br><span class="line">        y: date.getFullYear(),</span><br><span class="line">        m: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">        d: date.getDate(),</span><br><span class="line">        h: date.getHours(),</span><br><span class="line">        i: date.getMinutes(),</span><br><span class="line">        s: date.getSeconds(),</span><br><span class="line">        a: date.getDay()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> time_str = format.replace(<span class="regexp">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, <span class="function">(<span class="params">result, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = formatObj[key]</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;a&#x27;</span>) &#123; <span class="keyword">return</span> [<span class="string">&#x27;日&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>][value] &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.length &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            value = <span class="string">&#x27;0&#x27;</span> + value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value || <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> time_str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取上个月第一天和最后一天"><a href="#获取上个月第一天和最后一天" class="headerlink" title="获取上个月第一天和最后一天"></a>获取上个月第一天和最后一天</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>取上个月第一天与最后一天</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">Array</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getPrevMonth = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nowdays = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> year = nowdays.getFullYear()</span><br><span class="line">    <span class="keyword">let</span> month = nowdays.getMonth()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (month === <span class="number">0</span>) &#123;</span><br><span class="line">        month = <span class="number">12</span></span><br><span class="line">        year = year - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        month = <span class="string">&#x27;0&#x27;</span> + month</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> firstDay = year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + <span class="string">&#x27;01&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> lastDay = year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + myDate.getDate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [firstDay, lastDay]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算两个日期相差多少天"><a href="#计算两个日期相差多少天" class="headerlink" title="计算两个日期相差多少天"></a>计算两个日期相差多少天</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 计算两个日期之间相差多少天</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;startDate&#125;</span> </span>- string 开始时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;endDate&#125;</span> </span>- String 结束时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> intervalDate = <span class="function">(<span class="params">startDate, endDate</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> separator = <span class="string">&quot;-&quot;</span></span><br><span class="line">    <span class="keyword">let</span> oDate1</span><br><span class="line">    <span class="keyword">let</span> oDate2</span><br><span class="line">    <span class="keyword">let</span> iDays</span><br><span class="line">    oDate1 = startDate.split(separator)</span><br><span class="line">    oDate2 = endDate.split(separator)</span><br><span class="line">    <span class="keyword">let</span> strDateS = <span class="keyword">new</span> <span class="built_in">Date</span>(oDate1[<span class="number">0</span>], oDate1[<span class="number">1</span>] - <span class="number">1</span>, oDate1[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">let</span> strDateE = <span class="keyword">new</span> <span class="built_in">Date</span>(oDate2[<span class="number">0</span>], oDate2[<span class="number">1</span>] - <span class="number">1</span>, oDate2[<span class="number">2</span>])</span><br><span class="line">    iDays = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.abs(strDateS - strDateE) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">return</span> iDays</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React中父子组件传值</title>
      <link href="posts/49fa0165adc5/"/>
      <url>posts/49fa0165adc5/</url>
      
        <content type="html"><![CDATA[<h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ul><li><p>父组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; count &#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>: ++count&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="built_in">this</span>.increment&#125;&gt;increment&lt;/button&gt;</span><br><span class="line">                &lt;Child count=&#123;<span class="built_in">this</span>.state.count&#125;/&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在子组件中通过<code>props</code>获取父组件传递的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;p&gt;count: &#123;<span class="built_in">this</span>.props.count&#125;&lt;/p&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><p>父组件要获取子组件传递过来的值,可以在父组件中传递给子组件一个方法,子组件中通过这个方法传递传递参数,那么在父组件中通过调用这个方法即可取到这个值</p><ul><li>父组件<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; count &#125; = <span class="built_in">this</span>.state</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123; ++count &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toZero = <span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123; count &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="built_in">this</span>.increment&#125;&gt;increment&lt;/button&gt;</span><br><span class="line">                &lt;Child count=&#123;<span class="built_in">this</span>.state.count&#125; toZero=&#123;<span class="built_in">this</span>.toZero&#125;/&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>子组件<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    toZero = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props.toZero(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;p&gt;count: &#123;<span class="built_in">this</span>.props.count&#125;&lt;/p&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="built_in">this</span>.toZero&#125;&gt;toZero&lt;/button&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> 组件传值 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 组件传值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局之水平垂直居中</title>
      <link href="posts/2ef2a4a63a75/"/>
      <url>posts/2ef2a4a63a75/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于CSS水平垂直居中的布局，很多场景中都会用到，而且面试中也基本都是必考题。<br>于是就有了这篇文章，一方面根据自己所学巩固一下记忆，另一方面也能收集一些自己未曾了解到的解决方案，温故而知新。</p></blockquote><p><strong>如非特别声明，以下CSS布局全以以下html结构为准</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用绝对定位"><a href="#使用绝对定位" class="headerlink" title="使用绝对定位"></a>使用绝对定位</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 公共样式部分,以下绝对定位布局皆默认引用此处代码 */</span></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一种方案是给父级元素添加相对定位-子元素设置固定定位-top-值和-left-值为-50-然后设置-margin-top-和-margin-left-值为宽度负值的一半："><a href="#一种方案是给父级元素添加相对定位-子元素设置固定定位-top-值和-left-值为-50-然后设置-margin-top-和-margin-left-值为宽度负值的一半：" class="headerlink" title="一种方案是给父级元素添加相对定位,子元素设置固定定位 top 值和 left 值为 50%;然后设置 margin-top 和 margin-left 值为宽度负值的一半："></a>一种方案是给父级元素添加相对定位,子元素设置固定定位 <code>top</code> 值和 <code>left</code> 值为 <code>50%</code>;然后设置 <code>margin-top</code> 和 <code>margin-left</code> 值为宽度负值的一半：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用CSS的calc函数：原理同上，通过calc函数计算得到子元素-top-值和-left-的-50-减去子元素宽高的一半"><a href="#使用CSS的calc函数：原理同上，通过calc函数计算得到子元素-top-值和-left-的-50-减去子元素宽高的一半" class="headerlink" title="使用CSS的calc函数：原理同上，通过calc函数计算得到子元素 top 值和 left 的 50% 减去子元素宽高的一半"></a>使用CSS的calc函数：原理同上，通过calc函数计算得到子元素 <code>top</code> 值和 <code>left</code> 的 <code>50%</code> 减去子元素宽高的一半</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="另一种方案是设置子元素各个方向距离都为0，再使用margin-auto外边距设为自适应"><a href="#另一种方案是设置子元素各个方向距离都为0，再使用margin-auto外边距设为自适应" class="headerlink" title="另一种方案是设置子元素各个方向距离都为0，再使用margin: auto外边距设为自适应"></a>另一种方案是设置子元素各个方向距离都为0，再使用<code>margin: auto</code>外边距设为自适应</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用CSS3新特性transform-translate属性，通过定义元素2d方向的位置来达到水平垂直方向居中"><a href="#利用CSS3新特性transform-translate属性，通过定义元素2d方向的位置来达到水平垂直方向居中" class="headerlink" title="利用CSS3新特性transform: translate属性，通过定义元素2d方向的位置来达到水平垂直方向居中"></a>利用CSS3新特性transform: translate属性，通过定义元素2d方向的位置来达到水平垂直方向居中</h3><ul><li><p>此种方案只要设置子元素top值和left值为50%，且子元素平面方向为基于父元素的50%即可达到目的，因此<strong>此种方案子元素无需固定宽高</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/* 定义自身x轴和y轴基于父元素偏移-50% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用绝对定位各种问题比较多，而且只适用于宽高固定的情况，下面来看看宽高不固定的情况</p></li></ul><h2 id="弹性盒布局"><a href="#弹性盒布局" class="headerlink" title="弹性盒布局"></a>弹性盒布局</h2><ul><li>弹性盒布局的好用之处在于使用非常方便，只需指定父元素<code>display: flex</code>即可，下面来看看使用flex的处理方案</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;  <span class="comment">/* 设置元素为 flex 布局 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center; <span class="comment">/* 设置子元素水平方向居中 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;    <span class="comment">/* 设置子元素垂直方向居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>短短三行CSS代码，即可完成元素水平垂直方向居中，当然<strong>flex布局的强大不止于此</strong>，日后我会整理一篇关于详细应用flex布局的文章，这里就不再赘述</p><h2 id="Grid-网格布局"><a href="#Grid-网格布局" class="headerlink" title="Grid 网格布局"></a>Grid 网格布局</h2><ul><li>grid布局同样是很优秀的一种布局方案与flex布局有许多相似之处，但只支持高版本浏览器，兼容性不如flex，grid布局处理元素水平垂直居中，同样只需要三行代码：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;  <span class="comment">/* 声明元素为grid布局 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;     <span class="comment">/* 设置自身垂直方向居中 */</span></span><br><span class="line">    <span class="attribute">justify-self</span>: center;   <span class="comment">/* 设置自身水平方向居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h2><ul><li>如果只是为了水平垂直居中一个元素而使用table来实现，未免太闲了，这里要用到的是css的<code>display: table</code>属性，设置子元素为行内块元素，并设置父元素为table布局，再设置子元素水平方向和垂直方向居中即可</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前我所知道的关于CSS实现元素水平垂直方向居中的方案就是这些，如果您也有比较好的方案欢迎通过留言提出来，我会整理到文章中，感谢您的分享</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 初体验</title>
      <link href="posts/1d721d232156/"/>
      <url>posts/1d721d232156/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note info"><p>2020年9月21日更新：Vue3 正式发布</p></div><p>Vue3.0 RC已经发布一段时间，正好这段时间准备拿 <code>Vue</code> 自己写个导航网站，于是就想到使用新版的<code>Vue3.0</code>来作为新项目的开发框架。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装脚手架</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/<span class="built_in">cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>已经安装过的话再次执行命令就是安装到最新版，使用<code>vue -V</code>查看当前脚手架版本</p><p>安装完毕后通过<code>vue create</code>创建一个脚手架项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue3<span class="literal">-demo</span></span><br></pre></td></tr></table></figure><p>按下回车后即可完成创建，启动项目后即可看到熟悉的界面：</p><p><a href="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/vue3-study/initial.png"></a></p><p>打开项目后，可以发现<code>main.js</code>文件对比<code>Vue</code>之前的版本有了明显了区别：</p><ul><li><p>Vue 2.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Vue 3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>可以看到，Vue3 取消了 <code>new Vue</code> ，取而代之的是引入了一个<code>vue</code>中的<code>createApp</code>方法</p><blockquote><p><code>createApp</code> 会产生一个实例，该实例拥有全局的可配置上下文</p></blockquote><p>通过产生的实例然后挂载到根节点上</p><p>接下来，顺着文档来理解这些新特性</p><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><blockquote><p><code>setup</code> 函数是一个新的组件选项。作为在组件内使用 Composition API 的入口点。</p></blockquote><ul><li>该函数接收<code>props</code>作为<code>第一个</code>参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">        name: <span class="built_in">String</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;props: &#x27;</span>, props)</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/vue3-study/prop-log.png"></a></p><p>可以看到，我们获取到的结果是一个 <code>Proxy</code> 对象，而这也正是响应式设计的改动之一：使用<code>Proxy</code>来改写之前的<code>Object.defineProperty</code></p><ul><li><code>props</code> 对象是响应式的，但是解构<code>props</code>对象会使其失去响应性</li></ul><p><a href="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/vue3-study/deconstruction-object.png"></a></p><ul><li><p>第二个参数从原来2.x中的<code>this</code>选择性的暴露了一些property</p></li><li><p>另外：<code>this</code>在<code>setup()</code>函数中<strong>不可用</strong></p></li></ul><h2 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h2><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> name = reactive(<span class="string">&#x27;dong&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;name&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>reactive</code>方法接收一个普通对象然后返回该普通对象的响应式代理</p></blockquote><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote><p>接受一个参数值并返回一个响应式且可改变的 ref 对象。ref 对象拥有一个指向内部值的单一属性 <code>value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> name = reactive(&#123;<span class="attr">name</span>: <span class="string">&#x27;dong&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;name&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide-amp-inject"><a href="#provide-amp-inject" class="headerlink" title="provide&amp;inject"></a>provide&amp;inject</h3><p><code>provide</code>在组件中注入一个值传递到任一层级的子组件中，子组件通过<code>inject</code>获取到这个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供者</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        provide(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;dong&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用者</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">       <span class="keyword">const</span> dong = inject(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">       <span class="built_in">console</span>.log(dong)<span class="comment">// &#x27;dong&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>inject</code>接收可选的默认值作为第二个参数，如果未能<code>provide</code>提供的值，则<code>inject</code>使用第二个参数的默认值</p><p>如果需要注入的值具有响应性，可以通过<code>ref</code>来保证注入的值的响应性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> dong = ref(<span class="string">&#x27;dong&#x27;</span>)</span><br><span class="line">        provide(<span class="string">&#x27;name&#x27;</span>, dong)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，注入的值会得到同步</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中的数组方法</title>
      <link href="posts/1138bfd8771a/"/>
      <url>posts/1138bfd8771a/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数组的方法很多，但常用的就那几个，长时间不用慢慢就忘了用到的时候才想起来查一查。写篇文章整理一下数组方法可以帮助自己回忆一下以后没事看一看也能帮自己加深一下印象。</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><table><thead><tr><th align="center">方法名</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center"><a href="#contract">contract</a></td><td align="center">连接两个或多个数组。</td></tr><tr><td align="center"><a href="#join">join</a></td><td align="center">指定分隔符把数组中的所有元素放入一个字符串返回分割后的字符串。</td></tr><tr><td align="center"><a href="#pop">pop</a></td><td align="center">删除数组的最后一个元素并返回。</td></tr><tr><td align="center"><a href="#push">push</a></td><td align="center">向数组的末尾添加一个或多个元素，并返回新的数组的长度。</td></tr><tr><td align="center"><a href="#shift">shift</a></td><td align="center">删除数组中的第一个元素，并返回该值。</td></tr><tr><td align="center"><a href="#unshift">unshift</a></td><td align="center">向数组的开头添加一个或多个元素，并返回新的数组的长度。</td></tr><tr><td align="center"><a href="#splice">splice</a></td><td align="center">向/从数组中添加/删除项目，然后返回被删除的项目。</td></tr><tr><td align="center"><a href="#slice">slice</a></td><td align="center">从已有的数组中返回选定的元素</td></tr><tr><td align="center"><a href="#reverse">reverse</a></td><td align="center">颠倒数组中元素的顺序。</td></tr><tr><td align="center"><a href="#sort">sort</a></td><td align="center">对数组的元素进行排序。</td></tr><tr><td align="center"><a href="#toString">toString</a></td><td align="center">把数组转换为字符串，并返回结果。</td></tr><tr><td align="center"><a href="#forEach">forEach</a></td><td align="center">遍历数组中所有的项</td></tr><tr><td align="center"><a href="#map">map</a></td><td align="center">遍历数组所有的项并返回执行结果</td></tr><tr><td align="center"><a href="#find">find</a></td><td align="center">找出第一个符合条件的数组成员</td></tr><tr><td align="center"><a href="#findIndex">findIndex</a></td><td align="center">返回第一个符合条件的数组成员的位置</td></tr><tr><td align="center"><a href="#filter">filter</a></td><td align="center">返回满足的元素并组成新的数组</td></tr><tr><td align="center"><a href="#some">some</a></td><td align="center">返回数组中是否有满足条件的元素</td></tr><tr><td align="center"><a href="every">every</a></td><td align="center">返回数组中是否所有元素都满足条件</td></tr><tr><td align="center"><a href="#reduce">reduce</a></td><td align="center">从数组的第一项开始，逐个遍历到最后，迭代数组的所有项，然后构建一个最终返回的值。</td></tr><tr><td align="center"><a href="#reduceRight">reduceRight</a></td><td align="center">与 reduce() 方法类似，从数组的最后一项开始，向前逐个遍历到第一位，迭代数组的所有项，然后构建一个最终返回的值。</td></tr><tr><td align="center"><a href="#indexOf">indexOf</a></td><td align="center">查询元素在数组中第一次出现的位置并返回所在下标</td></tr><tr><td align="center"><a href="#lastIndexOf">lastIndexOf</a></td><td align="center">从右到左查询元素在数组中第一次出现的位置并返回所在下标</td></tr><tr><td align="center"><a href="#includes">includes</a></td><td align="center">返回一个布尔值，表示数组中是否包含给定的值</td></tr><tr><td align="center"><a href="#Array.from()">Array.from()</a></td><td align="center">将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</td></tr><tr><td align="center"><a href="#copyWithin">copyWithin</a></td><td align="center">在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</td></tr></tbody></table><h2 id="contract"><a href="#contract" class="headerlink" title="contract"></a>contract</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>concat() 方法用于连接两个或多个数组。</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.concat(arr1, arr2, ...arrX)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">arrX</td><td align="center">必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li>contract() 方法不会改变原数组，但是会返回一个合并后新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;dong&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> arr = arr1.concat(arr2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;hello&#x27;, &#x27;dong&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>contract() 方法的参数也可以是一个具体的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="string">&#x27;dong&#x27;</span></span><br><span class="line"><span class="keyword">const</span> arr = arr1.concat(arr2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;hello&#x27;, &#x27;dong&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>join() 方法通过指定分隔符把数组中的所有元素放入一个字符串返回分割后的字符串。</p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.join(separator)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">separator</td><td align="center">可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul><li>不使用参数，则默认使用英文逗号分割</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> str = arr.join() <span class="comment">// d,o,n,g</span></span><br></pre></td></tr></table></figure><ul><li>使用空字符串进行分割</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> str = arr.join(<span class="string">&#x27;&#x27;</span>) <span class="comment">// dong</span></span><br></pre></td></tr></table></figure><ul><li>任意指定一个分隔符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> str = arr.join(<span class="string">&#x27;-&#x27;</span>) <span class="comment">// d-o-n-g</span></span><br></pre></td></tr></table></figure><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><blockquote><p>pop() 方法用于删除数组的最后一个元素并返回。</p></blockquote><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.pop()</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><ul><li>直接使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> lastItem = arr.pop() <span class="comment">// g</span></span><br></pre></td></tr></table></figure><ul><li>使用该方法，会改变原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> lastItem = arr.pop() <span class="comment">// g</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr) <span class="comment">// [&#x27;d&#x27;, &#x27;o&#x27;, &#x27;n&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>如果数组为空，则 pop() 不改变数组，并返回 undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">const</span> lastItem = arr.pop()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr) <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;lastItem: &#x27;</span>, lastItem) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><blockquote><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的数组的长度。</p></blockquote><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.push(item1, item2, ....itemX)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">item1</td><td>必需。要添加到数组的第一个元素。</td></tr><tr><td align="center">item2</td><td>可选。要添加到数组的第二个元素。</td></tr><tr><td align="center">itemX</td><td>可选。可添加多个元素。</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><ul><li>直接使用，在数组后追加一个元素，原数组长度变为2</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> length = arr.push(<span class="string">&#x27;cool&#x27;</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>使用该方法，会改变原数组，而不是创建一个新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> length = arr.push(<span class="string">&#x27;cool&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr) <span class="comment">// [&#x27;dong&#x27;, &#x27;cool&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;length: &#x27;</span>, length) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>追加多个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">const</span> length = arr.push(<span class="string">&#x27;dong&#x27;</span>, <span class="string">&#x27;cool&#x27;</span>, <span class="string">&#x27;nice&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr) <span class="comment">// [&#x27;dong&#x27;, &#x27;cool&#x27;, &#x27;nice&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;length: &#x27;</span>, length) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><blockquote><p>shift() 方法用于删除数组中的第一个元素，并返回该值。</p></blockquote><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.shift()</span><br></pre></td></tr></table></figure><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><ul><li>直接使用，删除数组中的第一个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>, <span class="string">&#x27;cool&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> firstItem = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;firstItem: &#x27;</span>, firstItem) <span class="comment">// &#x27;dong&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>使用该方法，会改变原数组，而不是创建一个新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>, <span class="string">&#x27;cool&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> firstItem = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;firstItem: &#x27;</span>, firstItem) <span class="comment">// &#x27;dong&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr) <span class="comment">// [&#x27;cool&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>如果数组为空，则 shift() 不会改变数组，并返回 undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">const</span> firstItem = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;firstItem: &#x27;</span>, firstItem) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// []</span></span><br></pre></td></tr></table></figure><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><blockquote><p>unshift() 方法可向数组的开头添加一个或多个元素，并返回新的数组的长度。</p></blockquote><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.unshift(item1, item1, ....itemX)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">item1</td><td>必需。要添加到数组的第一个元素。</td></tr><tr><td align="center">item2</td><td>可选。要添加到数组的第二个元素。</td></tr><tr><td align="center">itemX</td><td>可选。可添加多个元素。</td></tr></tbody></table><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><ul><li>直接使用，在数组开头添加一个元素，原数组长度变为2</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> length = arr.unshift(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;length: &#x27;</span>, length)<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>使用该方法，会改变原数组，而不是创建一个新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> length = arr.unshift(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;hello&#x27;, &#x27;dong&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>添加多个元素，会按照顺序依次添加到原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> length = arr.unshift(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;hello&#x27;, &#x27;hi&#x27;, &#x27;dong&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;length: &#x27;</span>, length)<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><blockquote><p>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。</p></blockquote><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.splice(index,howmany,item1,.....,itemX)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">index</td><td>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td align="center">howmany</td><td>必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td></tr><tr><td align="center">item1, …, itemX</td><td>可选。向数组添加的新项目。</td></tr></tbody></table><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><ul><li>传递两个参数，删除数组中下标为0的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> deletedItem = arr.splice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;o&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;deletedItem &#x27;</span>, deletedItem)<span class="comment">// [&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>如果指定第二个参数为0，则不会删除元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> deletedItem = arr.splice(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;d&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;deletedItem &#x27;</span>, deletedItem)<span class="comment">// []</span></span><br></pre></td></tr></table></figure><ul><li>指定第一个参数为负数，则从数组末尾开始计算位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> deletedItem = arr.splice(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;d&#x27;, &#x27;o&#x27;, &#x27;n&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;deletedItem &#x27;</span>, deletedItem)<span class="comment">// [&#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>传递三个及以上的参数，则删除指定的元素并用参数列表中声明的值来替换被删除的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> deletedItem = arr.splice(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>， <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;deletedItem: &#x27;</span>, deletedItem) <span class="comment">// [&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><blockquote><p>slice() 方法可从已有的数组中返回选定的元素</p></blockquote><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.slice(start,end)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">start</td><td>必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td></tr><tr><td align="center">end</td><td>可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td></tr></tbody></table><p><strong>此方法并不会修改原数组，而是返回一个新数组</strong></p><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><ul><li>如果未指定 <code>end</code> 参数，那么该方法会选取从 <code>start</code> 到数组结尾的所有元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.slice(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newArr: &#x27;</span>, newArr)<span class="comment">// [&#x27;o&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>如果只传递一个参数值为0，则拷贝一份原数组并返回新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.slice(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newArr: &#x27;</span>, newArr)<span class="comment">// [&#x27;d&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>使用 slice() 方法，<code>end</code> 参数并不会包含该元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.slice(<span class="number">1</span>, <span class="number">3</span>)<span class="comment">// [&#x27;o&#x27;, &#x27;n&#x27;]</span></span><br></pre></td></tr></table></figure><p>如上代码，选取了下标为1，到下标为3（不包含）之间的元素</p><ul><li>指定<code>start</code>或<code>end</code>为负数，则该方法从数组尾部开始计算位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.slice(<span class="number">-2</span>, <span class="number">-1</span>)<span class="comment">// [&#x27;n&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><blockquote><p>reverse() 方法用于颠倒数组中元素的顺序。</p></blockquote><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.reverse()</span><br></pre></td></tr></table></figure><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><ul><li>使用该方法，会将原数组按照倒序顺序排列</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;g&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><h3 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h3><blockquote><p>sort() 方法用于对数组的元素进行排序。</p></blockquote><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.sort(sortby)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">sortby</td><td>可选。规定排序顺序。必须是函数。</td></tr></tbody></table><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><ul><li>如果不传递排序规则，会按照字符编码的顺序进行排序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">const</span> sort = arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sort: &#x27;</span>, sort)<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>sort() 方法的返回值是对数组的引用，不会生成新的数组，即会修改原数组结构</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><ul><li>如果需要按照给定标准进行排序，需要为sort()方法传递一个比较函数，该函数接受两个值并返回排序结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><h3 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h3><blockquote><p>toString() 方法可把数组转换为字符串，并返回结果。</p></blockquote><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.toString()</span><br></pre></td></tr></table></figure><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><ul><li>该方法并不会改变原数组，而是返回一个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;dong&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> stringArr = arr.toString()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;stringArr: &#x27;</span>, stringArr)<span class="comment">// dong</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;dong&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><h3 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h3><blockquote><p>forEach() 方法用来遍历数组中所有的项</p></blockquote><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(callback)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">callback</td><td>必须。所有数组成员依次调用该函数，直到找到数组的每一项。</td></tr></tbody></table><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><ul><li>forEach() 方法的回调函数接受三个参数,分别为<code>当前项</code>，<code>当前项的下标</code>，<code>数组本身</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;item: &#x27;</span>, item)<span class="comment">// d,o,n,g</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;index: &#x27;</span>, index)<span class="comment">// 0,1,2,3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="定义-12"><a href="#定义-12" class="headerlink" title="定义"></a>定义</h3><blockquote><p>map() 方法用来遍历数组所有的项并返回执行结果</p></blockquote><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">callback</td><td>必须。所有数组成员依次调用该函数并返回执行结果。</td></tr></tbody></table><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><ul><li>map() 方法的回调函数接受三个参数,分别为<code>当前项</code>，<code>当前项的下标</code>，<code>数组本身</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">arr.map(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;item: &#x27;</span>, item)<span class="comment">// d,o,n,g</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;index: &#x27;</span>, index)<span class="comment">// 0,1,2,3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>每次调用都会返回一个数组元素到新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item + <span class="string">&#x27;--&#x27;</span> + index</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// 该方法并不会修改原数组，而是返回一个新数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newArr: &#x27;</span>, newArr)<span class="comment">// [&#x27;d--0&#x27;, &#x27;o--1&#x27;, &#x27;n--2&#x27;, &#x27;g--3&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><h3 id="定义-13"><a href="#定义-13" class="headerlink" title="定义"></a>定义</h3><blockquote><p>find() 方法，用于找出第一个符合条件的数组成员</p></blockquote><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.find(callback)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">callback</td><td>必须。所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员</td></tr></tbody></table><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><ul><li>find() 方法的回调函数接受三个参数,分别为<code>当前项</code>，<code>当前项的下标</code>，<code>数组本身</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">arr.find(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;item: &#x27;</span>, item)<span class="comment">// d,o,n,g</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;index: &#x27;</span>, index)<span class="comment">// 0,1,2,3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>用来找到数组中第一个符合条件的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// d</span></span><br></pre></td></tr></table></figure><ul><li>找不到符合条件的元素会返回 <code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><h3 id="定义-14"><a href="#定义-14" class="headerlink" title="定义"></a>定义</h3><blockquote><p>findIndex() 方法返回第一个符合条件的数组成员的位置</p></blockquote><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.findIndex(callback)</span><br></pre></td></tr></table></figure><p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code>。</p><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><ul><li>find() 方法的回调函数接受三个参数,分别为<code>当前项</code>，<code>当前项的下标</code>，<code>数组本身</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><h3 id="定义-15"><a href="#定义-15" class="headerlink" title="定义"></a>定义</h3><blockquote><p>filter() 方法返回满足的元素并组成新的数组</p></blockquote><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.filter(callback)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">callback</td><td>必须。所有数组成员依次执行该回调函数并返回执行结果</td></tr></tbody></table><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><ul><li>filter() 方法的回调函数接受三个参数,分别为<code>当前项</code>，<code>当前项的下标</code>，<code>数组本身</code></li><li>找到数组中符合条件的元素并得到新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item !== <span class="string">&#x27;g&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// [&#x27;d&#x27;, &#x27;o&#x27;, &#x27;n&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><h3 id="定义-16"><a href="#定义-16" class="headerlink" title="定义"></a>定义</h3><blockquote><p>some() 方法返回数组中是否有满足条件的元素</p></blockquote><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.some(callback)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">callback</td><td>必须。所有数组成员依次执行该回调函数并返回执行结果</td></tr></tbody></table><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><ul><li>some() 方法的回调函数接受三个参数,分别为<code>当前项</code>，<code>当前项的下标</code>，<code>数组本身</code></li><li>some() 方法只要找到数组中有一个元素结果为 <code>true</code>，就返回 <code>true</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.some(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item !== <span class="string">&#x27;g&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>找不到符合条件的元素，则返回 <code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.some(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item === <span class="string">&#x27;x&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><h3 id="定义-17"><a href="#定义-17" class="headerlink" title="定义"></a>定义</h3><blockquote><p>every() 方法返回数组中是否所有元素都满足条件</p></blockquote><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.every(callback)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">callback</td><td>必须。所有数组成员依次执行该回调函数并返回执行结果</td></tr></tbody></table><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><ul><li>every() 方法的回调函数接受三个参数,分别为<code>当前项</code>，<code>当前项的下标</code>，<code>数组本身</code></li><li>every() 方法只有数组中所有元素结果都为 <code>true</code>，才返回 <code>true</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.every(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item !== <span class="string">&#x27;x&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>只要有一个元素不满足条件，则返回 <code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.every(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item === <span class="string">&#x27;d&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><h3 id="定义-18"><a href="#定义-18" class="headerlink" title="定义"></a>定义</h3><blockquote><p>reduce() 方法从数组的第一项开始，逐个遍历到最后，迭代数组的所有项，然后构建一个最终返回的值。</p></blockquote><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(callback)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">callback</td><td>必须。用于执行每个数组元素的函数。</td></tr><tr><td align="center">initial</td><td>可选。作为归并的初始值，被回调函数第一次执行时的第一个参数接收</td></tr></tbody></table><h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><ul><li>reduce() 方法的回调函数接受四个参数,分别为 <code>上一项</code>，<code>下一项</code>，<code>当前项的下标</code>，<code>数组本身</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.reduce(<span class="function">(<span class="params">prev, next, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + <span class="string">&#x27;--&#x27;</span> + next + <span class="string">&#x27;--&#x27;</span> + index</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// d--o--1--n--2--g--3</span></span><br></pre></td></tr></table></figure><p>可以看到以上代码打印结果，没有下标<code>0</code>，因为 reduce() 方法归并了 <code>prev</code> 和 <code>next</code>作为一项</p><ul><li>传递 <code>initial</code> 参数，作为函数执行时的第一个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.reduce(<span class="function">(<span class="params">prev, next, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + <span class="string">&#x27;--&#x27;</span> + next + <span class="string">&#x27;--&#x27;</span> + index</span><br><span class="line">&#125;, <span class="number">2020</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// 2020--d--0--o--1--n--2--g--3</span></span><br></pre></td></tr></table></figure><ul><li>实现数组元素累加</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.reduce(<span class="function">(<span class="params">prev, next, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + next</span><br><span class="line">&#125;, <span class="number">2020</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// 2020dong</span></span><br></pre></td></tr></table></figure><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><blockquote><p>与 reduce() 方法类似，从数组的最后一项开始，向前逐个遍历到第一位，迭代数组的所有项，然后构建一个最终返回的值。</p></blockquote><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><h3 id="定义-19"><a href="#定义-19" class="headerlink" title="定义"></a>定义</h3><blockquote><p>indexOf() 方法用于查询元素在数组中第一次出现的位置并返回所在下标</p></blockquote><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.indexOf(item)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">item</td><td>必须。要查找的数组元素</td></tr><tr><td align="center">start</td><td>可选。表明要从何处开始查询</td></tr></tbody></table><h3 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h3><ul><li>indexOf() 方法返回元素在数组中的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.indexOf(<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>找不到元素返回 <code>-1</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.indexOf(<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h2><h3 id="定义-20"><a href="#定义-20" class="headerlink" title="定义"></a>定义</h3><blockquote><p>lastIndexOf() 方法从右到左查询元素在数组中第一次出现的位置并返回所在下标</p></blockquote><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.lastIndexOf(item)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">item</td><td>必须。要查找的数组元素</td></tr><tr><td align="center">start</td><td>可选。表明要从何处开始查询</td></tr></tbody></table><h3 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h3><ul><li>lastIndexOf() 方法从右到左，找到元素在数组中第一次出现的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.lastIndexOf(<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>指定开始查询的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.lastIndexOf(<span class="string">&#x27;o&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>找不到元素返回 <code>-1</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.lastIndexOf(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><h3 id="定义-21"><a href="#定义-21" class="headerlink" title="定义"></a>定义</h3><blockquote><p>includes() 方法返回一个布尔值，表示数组中是否包含给定的值</p></blockquote><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.includes(item)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">item</td><td>必须。要查找的数组元素</td></tr></tbody></table><h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><ul><li>includes() 方法返回数组中是否存在给定的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.includes(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>找不到元素返回 <code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.includes(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><h3 id="定义-22"><a href="#定义-22" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Array.from() 方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p></blockquote><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayObject)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">arrayObject</td><td>必须。要转为数组的对象</td></tr></tbody></table><h3 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h3><ul><li>将一个类数组对象转换为真正的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrObj = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">    length: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(arrObj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;d&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>将<code>NodeList</code>对象转换为真正的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> boxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="built_in">Array</span>.from(boxes)</span><br></pre></td></tr></table></figure><ul><li>只要是部署了 Iterator 接口的数据结构，<code>Array.from</code>都能将其转为数组。</li></ul><h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h2><h3 id="定义-23"><a href="#定义-23" class="headerlink" title="定义"></a>定义</h3><blockquote><p>copyWithin() 方法在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</p></blockquote><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.copyWithin((target, start = <span class="number">0</span>, end = <span class="built_in">this</span>.length))</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">target</td><td>必须。从该位置开始替换数据。如果为负值，表示倒数。</td></tr><tr><td align="center">start</td><td>可选。从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算</td></tr><tr><td align="center">end</td><td>可选。到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。</td></tr></tbody></table><h3 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h3><ul><li>使用该方法，会改变原数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.copyWithin(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr: &#x27;</span>, arr)<span class="comment">// [&#x27;d&#x27;, &#x27;d&#x27;, &#x27;o&#x27;, &#x27;n&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>指定开始位置和结束位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))<span class="comment">// [&#x27;d&#x27;, &#x27;n&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>JavaScript高级程序设计（第3版）</li><li><a href="https://www.w3school.com.cn/">w3school</a></li><li><a href="https://es6.ruanyifeng.com/#docs/array">阮一峰 ES6入门教程-数组的扩展</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客从搭建到部署</title>
      <link href="posts/16fc351936e2/"/>
      <url>posts/16fc351936e2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为自己是初次搭建<a href="https://hexo.io/">Hexo</a>博客，不少地方都有踩坑，在此记录一下从搭建到部署的过程以及对<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>主题自定义上的一些处理。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul><li>安装之前确保自己已安装<a href="https://nodejs.org/">Node.js</a>和<a href="https://git-scm.com/">Git</a></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure><ul><li>也可以选择局部安装</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><ul><li>这里我是全局安装的，可直接使用<code>hexo &lt;command&gt;</code>命令</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>安装完成后，执行下列命令，即可生成一份简单的模板文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>当前目录下执行命令<code>npm run server</code>或<code>hexo s</code>即可在本地服务器快速启动</p><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/hexo-init.png"></p><p>接下来就可以开始编写文章了</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>如果不喜欢初始化的界面效果，那我们可以去选择自己喜欢的<a href="https://hexo.io/themes/">主题</a>，我的博客主题使用的是<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></p><p>进入到博客根目录下，使用<code>git</code>安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>进入博客根目录下的_config.yml文件，修改主题为<code>butterfly</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首次使用需要安装作者编写主题使用的模板渲染器和样式处理器插件，否则启动会报错</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-pug</span> hexo<span class="literal">-renderer</span><span class="literal">-stylus</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>以上配置完毕后停止服务并重新执行<code>hexo s</code>命令后即可查看效果</p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>进入到主题目录<code>themes/butterfly</code>下，复制<code>_config.yml</code>文件到博客根目录下，并重命名为<code>_config.butterfly.yml</code>。<br>Hexo 会自动合并<code>_config.yml</code>和<code>_config.butterfly.yml</code>里的配置</p><h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><p>初始我们页面只有主页和归档页，如果需要其他页面则需要手动添加</p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><ol><li>进入到博客根目录下</li><li>输入<code>hexo new page tags</code></li><li>找到<code>source/tags/index.md</code>文件</li><li>修改文件为：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-08-24</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><ol><li>进入到博客根目录下</li><li>输入<code>hexo new page categories</code></li><li>找到<code>source/categories/index.md</code>文件</li><li>修改文件为：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-08-24</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h3><ol><li>进入到博客根目录下</li><li>输入<code>hexo new page about</code></li><li>找到<code>source/about/index.md</code>文件</li><li>修改文件为：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2020-08-24</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="添加导航"><a href="#添加导航" class="headerlink" title="添加导航"></a>添加导航</h2><p>新建页面完毕后我们需要在配置文件中配置新建页面的导航地址，否则找不到</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><strong>路径名必须是 /xxx/，后面使用 || 分开，然后写图标名。</strong>重新启动后即可生效</p><h2 id="主题自定义"><a href="#主题自定义" class="headerlink" title="主题自定义"></a>主题自定义</h2><p>接下来就可以按照自己的喜好来修改主题样式了</p><h3 id="文章目录溢出隐藏"><a href="#文章目录溢出隐藏" class="headerlink" title="文章目录溢出隐藏"></a>文章目录溢出隐藏</h3><p>在某些时候，导航目录的文字过长时会换行显示，例如这样：<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/css-breakline.png"></p><p>再看修改过后的样子：<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/css-overflow.png"></p><p>这样对比就明显了，那么开始修改<br>找到博客目录下<code>themes/butterfly/source/css/_layout/sidebar.styl</code>文件第<code>56</code>行修改为：</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.toc-link</span><br><span class="line">    <span class="attribute">display</span>: flex</span><br></pre></td></tr></table></figure><p>在<code>60</code>行之后添加：</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.toc-text</span><br><span class="line">    <span class="attribute">overflow</span>:hidden</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap</span><br></pre></td></tr></table></figure><p>保存修改后刷新页面即可看到效果</p><h2 id="部署到Github和Coding"><a href="#部署到Github和Coding" class="headerlink" title="部署到Github和Coding"></a>部署到Github和Coding</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>登录 <code>github</code> ，右上角点击新建仓库<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/new-repository.png"></p><p>创建的仓库名必须是<code>username.github.io</code>格式，且仓库必须开放<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/create-repository.png"></p><p>无误后即可点击创建</p><h3 id="配置SSH秘钥"><a href="#配置SSH秘钥" class="headerlink" title="配置SSH秘钥"></a>配置SSH秘钥</h3><p>如果不是第一次配置则可跳过本环节<br>首先打开<code>git</code>面板，输入以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config -<span class="literal">-global</span> user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>这里的<code>yourname</code>是你的<code>github</code>用户名，<code>youremail</code>是<code>github</code>绑定的邮箱</p><p>接下来生成SSH秘钥：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>连续回车即可，之后会在你的电脑用户目录下生成<code>id_rsa</code>和<code>id_rsa.pub</code>文件<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/ssh-address.png"></p><p>用记事本打开<code>id_rsa.pub</code>文件，全选复制内容<br>然后回到<code>github</code>，打开<code>Settings</code>，找到<code>SSH and GPG keys</code>选项，点击右上角按钮新建</p><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/new-ssh.png"><br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/ssh-key.png"><br>随便起个名称然后把刚刚复制的内容粘贴到里面，然后点击下面绿色按钮新建即可</p><p>打开<code>git</code>面板测试一下，输入以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure><h3 id="部署博客到Github"><a href="#部署博客到Github" class="headerlink" title="部署博客到Github"></a>部署博客到Github</h3><p>打开根目录下的<code>_config.yml</code>文件，在文件最下方添加以下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>把<code>yourname</code>替换成你的<code>github</code>用户名</p><p>然后我们需要再下载一个部署插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>下载完毕后再执行<code>hexo g -d</code>命令，即可自动部署到<code>github</code><br>然后输入<code>yourname.github.io</code>即可访问</p><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>进入我们购买域名的云服务商，比如我是在腾讯云买的那就登录腾讯云然后在控制台找到我的域名<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/my-domain.png"><br>然后解析按钮按如下格式添加一个域名解析<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/create-parse.png"></p><p>然后进入到我们博客目录<code>source</code>下，新增一个<code>CNAME</code>文件，<strong>文件名必须大写且没有后缀。</strong></p><p>进入我们新建的仓库，点击<code>settings</code>按钮<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/repository-settings.png"></p><p>一直往下翻，找到一个<code>GitHub Pages</code>选项<br><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/hexo/custom-domain.png"><br>在红框所示处输入自己的域名点击保存</p><p>这个时候就可以通过域名访问来访问了</p><h3 id="部署到Coding"><a href="#部署到Coding" class="headerlink" title="部署到Coding"></a>部署到Coding</h3><p>方法同上，但是仓库名需要设置为用户名，然后修改<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:lujdong/lujdong.github.io.git</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">git@e.coding.net:lujiandong/dong/dong.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>Hexo官网 <a href="https://hexo.io/">hexo</a></li><li>Butterfly 安装文档 <a href="https://demo.jerryc.me/posts/21cfbf15/">butterfly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用的在线网站</title>
      <link href="posts/721481ea525d/"/>
      <url>posts/721481ea525d/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p>文章不定期持续更新中，如果您也有趣实用的网站，欢迎通过留言告诉我，我会持续将收集的各种好用或者有趣的网站收集到这里，</p></div><h1 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h1><h2 id="多端解决方案"><a href="#多端解决方案" class="headerlink" title="多端解决方案"></a>多端解决方案</h2><h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><ul><li>网站地址：<a href="http://electronjs.org/">http://electronjs.org/</a></li></ul><blockquote><p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面端应用程序</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/electron.png"></p><h3 id="taro"><a href="#taro" class="headerlink" title="taro"></a>taro</h3><ul><li>网站地址：<a href="https://taro.aotu.io/">https://taro.aotu.io/</a></li></ul><blockquote><p>Taro是一个开放式跨端跨框架解决方案，支持使用React、Vue、Nerv等框架开发多端应用</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/taro.png"></p><h3 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h3><ul><li>网站地址：<a href="https://uniapp.dcloud.io/">https://uniapp.dcloud.io/</a></li></ul><blockquote><p>uni-app通过使用Vue.js开发所有前端应用,真正的一次开发,多端使用</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/uni-app.png"></p><h3 id="Chameleon"><a href="#Chameleon" class="headerlink" title="Chameleon"></a>Chameleon</h3><ul><li>网站地址：<a href="https://cml.js.org/">https://cml.js.org/</a></li></ul><blockquote><p>又一个跨多端开发的解决方案，正如其名：可以像变色龙一样适应不同的环境</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/chameleon.png"></p><h3 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h3><ul><li>网站地址：<a href="https://weex.apache.org/">https://weex.apache.org/</a></li></ul><blockquote><p>Weex是一个可以使用现代化的Web技术开发高性能原生应用的框架，支持使用React、Vue等框架开发Android、iOS原生应用。</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/weex.png"></p><h3 id="Rax"><a href="#Rax" class="headerlink" title="Rax"></a>Rax</h3><ul><li>网站地址：<a href="https://rax.js.org/">https://rax.js.org/</a></li></ul><blockquote><p>超轻量，高性能，易上手的前端解决方案。一次开发多端运行，解放重复工作，专注产品逻辑，提升开发效率。</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/rax.png"></p><h2 id="UI库"><a href="#UI库" class="headerlink" title="UI库"></a>UI库</h2><h3 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h3><ul><li>网站地址：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a></li></ul><blockquote><p>由蚂蚁金服开源的基于React的组件库，组件齐全，React开发的不二之选</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/ant-design.png"></p><h3 id="Ant-Design-Vue"><a href="#Ant-Design-Vue" class="headerlink" title="Ant Design Vue"></a>Ant Design Vue</h3><ul><li>网站地址：<a href="https://www.antdv.com/">https://www.antdv.com/</a></li></ul><blockquote><p>基于VUE的组件库，共享Ant Design of React设计工具体系</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/ant-design-vue.png"></p><h3 id="iView"><a href="#iView" class="headerlink" title="iView"></a>iView</h3><ul><li>网站地址：<a href="https://www.iviewui.com/">https://www.iviewui.com/</a></li></ul><blockquote><p>基于Vue.js的开源UI组件库，主要服务于PC界面的中后台产品</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/view-design.png"></p><h3 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h3><ul><li>网站地址：<a href="https://element.eleme.io/">https://element.eleme.io/</a></li></ul><blockquote><p>基于Vue.js的开源UI组件库，适合开发中后台产品</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/element-ui.png"></p><h3 id="Ant-Design-Mobile"><a href="#Ant-Design-Mobile" class="headerlink" title="Ant Design Mobile"></a>Ant Design Mobile</h3><ul><li>网站地址：<a href="https://mobile.ant.design/">https://mobile.ant.design/</a></li></ul><blockquote><p>antd-mobile是Ant Design的移动规范的实现，适用于各中大型产品应用。</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/ant-design-mobile.png"></p><h3 id="mand-mobile"><a href="#mand-mobile" class="headerlink" title="mand-mobile"></a>mand-mobile</h3><ul><li>网站地址：<a href="https://mand-mobile.gitee.io/docs/index.gitee.html">https://mand-mobile.gitee.io/docs/index.gitee.html</a></li></ul><blockquote><p>面向金融场景的Vue移动端UI组件库，丰富、灵活、实用，快速搭建优质的金融类产品，让复杂的金融场景变简单</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/mand-mobile.png"></p><h3 id="vant-ui"><a href="#vant-ui" class="headerlink" title="vant-ui"></a>vant-ui</h3><ul><li>网站地址：<a href="https://youzan.github.io/vant">https://youzan.github.io/vant</a></li></ul><blockquote><p>由有赞前端团队开源的轻量、可靠的移动端 Vue 组件库</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/vant-ui.png"></p><h3 id="frozen-ui"><a href="#frozen-ui" class="headerlink" title="frozen-ui"></a>frozen-ui</h3><ul><li>网站地址：<a href="http://frozenui.github.io/">http://frozenui.github.io/</a></li></ul><blockquote><p>FrozenUI 是一套基于移动端的UI库轻量、精美、遵从手机 QQ 设计规范。FrozenUI已经很久没有维护了，不过个人项目喜欢的话也还是可以使用的</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/frozen-ui.png"></p><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><h2 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h2><h3 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h3><ul><li>网站地址：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li></ul><blockquote><p>阿里巴巴开源的矢量图标库，支持生成CSS链接在线引用、或者下载到本地使用；同时目前支持下载SVG、AI、PNG格式文件，支持选择颜色，设置大小等。支持多个项目管理不同的图标样式，多项目应用非常方便</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/iconfont.png"></p><h3 id="Eva-Icons"><a href="#Eva-Icons" class="headerlink" title="Eva Icons"></a>Eva Icons</h3><ul><li>网站地址：<a href="https://akveo.github.io/eva-icons/#/">https://akveo.github.io/eva-icons/#/</a></li></ul><blockquote><p>Eva Icons 图标设计非常精美，同时支持四种动画类型：zoom、pulse、shake、flip；可设置图标为fill和outline两种类型；支持包下载使用或单个图标下载SVG,png格式</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/eva-icons.png"></p><h3 id="FontAwesome"><a href="#FontAwesome" class="headerlink" title="FontAwesome"></a>FontAwesome</h3><ul><li>网站地址：<a href="https://fontawesome.dashgame.com/">https://fontawesome.dashgame.com/</a></li></ul><blockquote><p>一套绝佳的图标字体库和CSS框架</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/font-awesome.png"></p><h1 id="实用网站"><a href="#实用网站" class="headerlink" title="实用网站"></a>实用网站</h1><h2 id="在线PS"><a href="#在线PS" class="headerlink" title="在线PS"></a>在线PS</h2><ul><li>网站地址：<a href="https://ps.gaoding.com/">https://ps.gaoding.com/</a></li></ul><blockquote><p>如果你只是临时需要修改一下图片不想下载PhotoShop，那么这个网站无疑是个选择，基础功能该有的都有，P图、设计，完全OK</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/ps-online.png"></p><h2 id="在线壁纸图库"><a href="#在线壁纸图库" class="headerlink" title="在线壁纸图库"></a>在线壁纸图库</h2><h3 id="pixbay"><a href="#pixbay" class="headerlink" title="pixbay"></a>pixbay</h3><ul><li>网站地址：<a href="https://pixabay.com/">https://pixabay.com/</a></li></ul><blockquote><p>一款免费的正版高清图片素材库，不仅包含丰富的高清壁纸图片，同时包含视频，插画和矢量图，支持在线下载</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/pixbay.png"></p><h3 id="wallhaven"><a href="#wallhaven" class="headerlink" title="wallhaven"></a>wallhaven</h3><ul><li>网站地址：<a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li></ul><blockquote><p>同样免费的一款在线壁纸图库，涵盖各种类型各种尺寸，并支持在线下载。同时您也可以上传分享您喜欢的壁纸</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/awesome-wallpaper.png"></p><h2 id="Carbon"><a href="#Carbon" class="headerlink" title="Carbon"></a>Carbon</h2><ul><li>网站地址：<a href="https://carbon.now.sh/">https://carbon.now.sh/</a></li></ul><blockquote><p>一款可以将代码生成为好看的图片的工具，您可以选择输入的代码语言，自定义主题配色；同时支持导出为png/svg格式，甚至您可以将其作为iframe插入到网页中</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/carbon.png"></p><h2 id="U钙网"><a href="#U钙网" class="headerlink" title="U钙网"></a>U钙网</h2><ul><li>网站地址：<a href="http://www.uugai.com/">http://www.uugai.com/</a></li></ul><blockquote><p>一款免费的logo在线制作网站，只需输入logo名称即可生成各种logo类型，支持：通用图标、字母图标、动物图标、人物图标、房屋建筑、植物图标、龙凤神兽、厨师美食、文字设计、欧式logo等方案，选择喜欢的下载即可，但是如果需要下载psd、ai等格式的源文件，则需要付费人工在线制作</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/common/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/lujdong/assets-cdn/blog/images/posts/navigate/ugai.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网址导航 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网址导航 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
